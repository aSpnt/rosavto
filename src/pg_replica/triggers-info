#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""Посылка запроса на получение дампов таблиц
"""

import argparse
import logging
import ConfigParser
import xml.etree.ElementTree as et

from bus_communicator import BusCommunicator
from pgdb import *


logger = logging.getLogger('triggers-ask')


if __name__ == '__main__':

    logger.setLevel(logging.DEBUG)

    ch = logging.StreamHandler()
    ch.setLevel(logging.ERROR)

    formatter = logging.Formatter('%(asctime)s %(name)s: %(levelname)s: %(message)s', datefmt='%b %d %H:%M:%S')
    ch.setFormatter(formatter)

    logger.addHandler(ch)

    parser = argparse.ArgumentParser()
    parser.add_argument('trigger_request', help='trigger request')
    args = parser.parse_args()
    trigger_request = args.trigger_request

    config_name = '/etc/pg_replica.conf'
    #config_name = 'pg_replica.conf'
    if not os.path.isfile(config_name):
        logger.critical('Configuration file "%s" not found.' % config_name)
        sys.exit(1)

    cfg = ConfigParser.SafeConfigParser({'log_file': '/var/log/pg_replica.log', 'log_level': 'debug'})

    cfg.read(config_name)
    log_file = cfg.get('logging', 'log_file')
    log_level = cfg.get('logging', 'log_level')


    if cfg.has_section('database'):
        host = cfg.get('database', 'host')
        port = cfg.getint('database', 'port')
        dbname = cfg.get('database', 'database')
        db_user = cfg.get('database', 'user')
        db_passwd = cfg.get('database', 'password')
        com_table = cfg.get('database', 'com_table')
        com_schema = cfg.get('database', 'com_schema')
    else:
        logger.critical('Invalid config file.')
        sys.exit(1)

    if cfg.has_section('bus'):
        uri = cfg.get('bus', 'uri')
        bus_user = cfg.get('bus', 'user')
        bus_passwd = cfg.get('bus', 'password')
        addr = cfg.get('bus', 'address')
    else:
        logger.critical('Invalid config file.')
        sys.exit(1)

    if cfg.has_section('fulldump'):
        tables = cfg.get('fulldump', 'tables_for_dump')
        tables = [t.strip() for t in tables.split(',')]
    else:
        logger.critical('Invalid config file.')
        sys.exit(1)

    logger.debug('Start trigger info processing.')


    tree = et.parse(trigger_request)
    root = tree.getroot()
    header = root.find('{http://schemas.xmlsoap.org/soap/envelope/}Header')
    sender = header.find('{http://www.w3.org/2005/08/addressing}From')
    peer = sender.find('{http://www.w3.org/2005/08/addressing}Address').text
    action = header.find('{http://www.w3.org/2005/08/addressing}Action').text
    body = root.find('{http://schemas.xmlsoap.org/soap/envelope/}Body')

    sender = BusCommunicator(uri,
                             addr,
                             bus_user,
                             bus_passwd)

    action = 'sm://messages/application/gis/geochanges_direction'
    request = 'triggersInfo'

    db = PgDB(host, port, dbname, db_user, db_passwd)
    c = db.con.cursor()

    info = []
    for tab in tables:
        if not db.is_trigger_exist(tab):
            status = 'not-exist'
        else:
            status = 'disabled' if  db.is_trigger_disabled(tab) else 'enabled'
        info.append("%s:%s" % (tab, status))
    info = '<tbls>%s</tbls>' % ','.join(info)

    sender.send_message(peer, request, action, addition_info=info)

    logger.debug('Stop trigger info processing.')
    logger.info('Stop logging.')
